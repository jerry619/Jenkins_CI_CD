def deploy (namespace) { 
    sh '''
    ls -lrth
    echo "Creating namespace ${namespace} if needed"
    [ ! -z \"\$(kubectl get ns ${namespace} -o name 2>/dev/null)\" ] || kubectl apply -f namespace.yml
    kubectl apply -f deployment.yml
    kubectl apply -f service.yml
    '''
}
def build_status (state) {
    gitLabConnection('Jenkins')
    updateGitlabCommitStatus(name: 'build', state: "${state}")
}
def buid_pass_git () {
    script{
        if (currentBuild.currentResult == "ABORTED") {
            build_status ('canceled')
        } else if ( currentBuild.currentResult == "FAILURE"){
            build_status ('failed')
        } else {
            build_status ('success')
        }
    }
}

pipeline {
        agent any
        options {
                buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
                preserveStashes()
                disableConcurrentBuilds()
        }
        environment {
            namespace = 'test-namespace'
        }
        tools {
                maven 'Local_Maven_3.5.4'
                jdk 'Local_jdk_1.8.0'
        }
        stages {
                stage('Maven Initialize, build and Unit test') {
                        steps { 
                                deleteDir()
                                build_status ('running')
                                withSonarQubeEnv('sonarenv') {
                                    sh 'mvn package sonar:sonar'
                                }
                                jacoco()
                        }
                        post {
                                always {
                                    junit 'target/surefire-reports/**/*.xml'
                                    script {
                                        echo currentBuild.currentResult
                                        stash includes: 'target/*.jar', name: 'targetfiles'
                                    }
                                }
                        }
                }
                stage("Quality Gate") {
                    steps {
                        timeout(time: 1, unit: 'HOURS') {
                        // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                        // true = set pipeline to UNSTABLE, false = don't
                        // Requires SonarQube Scanner for Jenkins 2.7+
                            script {
                                def qg = waitForQualityGate()
                                if (qg.status != 'OK') {
                                    error "Pipeline aborted due to quality gate failure: ${qg.status}"
                                }
                            }
                        }    
                    }    
                }
                stage("Docker image Creation") {
                        steps {
                            git branch: 'master',
                                credentialsId: 'eb402e14-8fee-482f-9c81-d97b9ea64481',
                                url: 'http://192.168.56.102/jerry/Templates.git'
                            dir('openjdk8') {
                                script {
                                    unstash 'targetfiles'
                                    docker.withTool("local") { 
                                       withDockerRegistry([credentialsId: "Dockerhub", url: ""]) {
                                     //   def img = docker.build("jjjje/directory_${JOB_NAME}")
                                       // img.push()
                                    //    img.push('${BUILD_NUMBER}')
                                       }
                                    }
                                    
                                }
                            }
                        }
                }
                stage('deploy') {
                    steps {
                        dir('openjdk8') {
                            echo "Deploying"
                            //deploy (namespace)
                        }
                    }
                }
                stage('Performance Tests') {
                    steps {
                            dir ('openjdk8') {
                            sh 'ls -lrth'
                            sh 'bzt test.yml'
                            perfReport 'TaurusResult/perf_result_csv.xml'
                            }    
                    }
                }
        }
        post {
            always {
                buid_pass_git ()   
            }       
        }
}